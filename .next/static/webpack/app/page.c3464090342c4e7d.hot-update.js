"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-client)/./app/client/platforms/openai.ts":
/*!****************************************!*\
  !*** ./app/client/platforms/openai.ts ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGPTApi: function() { return /* binding */ ChatGPTApi; },\n/* harmony export */   OpenaiPath: function() { return /* reexport safe */ _app_constant__WEBPACK_IMPORTED_MODULE_0__.OpenaiPath; }\n/* harmony export */ });\n/* harmony import */ var _app_constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/app/constant */ \"(app-client)/./app/constant.ts\");\n/* harmony import */ var _app_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/app/store */ \"(app-client)/./app/store/index.ts\");\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api */ \"(app-client)/./app/client/api.ts\");\n/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../locales */ \"(app-client)/./app/locales/index.ts\");\n/* harmony import */ var _fortaine_fetch_event_source__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @fortaine/fetch-event-source */ \"(app-client)/./node_modules/@fortaine/fetch-event-source/lib/esm/fetch.js\");\n/* harmony import */ var _app_utils_format__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/app/utils/format */ \"(app-client)/./app/utils/format.ts\");\n/* harmony import */ var _app_config_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/app/config/client */ \"(app-client)/./app/config/client.ts\");\n/* harmony import */ var _app_azure__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/app/azure */ \"(app-client)/./app/azure.ts\");\n\n\n\n\n\n\n\n\nclass ChatGPTApi {\n    path(path) {\n        const accessStore = _app_store__WEBPACK_IMPORTED_MODULE_1__.useAccessStore.getState();\n        const isAzure = accessStore.provider === _app_constant__WEBPACK_IMPORTED_MODULE_0__.ServiceProvider.Azure;\n        if (isAzure && !accessStore.isValidAzure()) {\n            throw Error(\"incomplete azure config, please check it in your settings page\");\n        }\n        let baseUrl = isAzure ? accessStore.azureUrl : accessStore.openaiUrl;\n        if (baseUrl.length === 0) {\n            var _getClientConfig;\n            const isApp = !!((_getClientConfig = (0,_app_config_client__WEBPACK_IMPORTED_MODULE_5__.getClientConfig)()) === null || _getClientConfig === void 0 ? void 0 : _getClientConfig.isApp);\n            baseUrl = isApp ? _app_constant__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_API_HOST : _app_constant__WEBPACK_IMPORTED_MODULE_0__.ApiPath.OpenAI;\n        }\n        if (baseUrl.endsWith(\"/\")) {\n            baseUrl = baseUrl.slice(0, baseUrl.length - 1);\n        }\n        if (!baseUrl.startsWith(\"http\") && !baseUrl.startsWith(_app_constant__WEBPACK_IMPORTED_MODULE_0__.ApiPath.OpenAI)) {\n            baseUrl = \"https://\" + baseUrl;\n        }\n        if (isAzure) {\n            path = (0,_app_azure__WEBPACK_IMPORTED_MODULE_6__.makeAzurePath)(path, accessStore.azureApiVersion);\n        }\n        return [\n            baseUrl,\n            path\n        ].join(\"/\");\n    }\n    extractMessage(res) {\n        var _res_choices_at_message, _res_choices_at, _res_choices;\n        var _res_choices_at_message_content;\n        return (_res_choices_at_message_content = (_res_choices = res.choices) === null || _res_choices === void 0 ? void 0 : (_res_choices_at = _res_choices.at(0)) === null || _res_choices_at === void 0 ? void 0 : (_res_choices_at_message = _res_choices_at.message) === null || _res_choices_at_message === void 0 ? void 0 : _res_choices_at_message.content) !== null && _res_choices_at_message_content !== void 0 ? _res_choices_at_message_content : \"\";\n    }\n    async chat(options) {\n        var _options_onController, _options;\n        const messages = options.messages.map((v)=>({\n                role: v.role,\n                content: v.content\n            }));\n        const modelConfig = {\n            ..._app_store__WEBPACK_IMPORTED_MODULE_1__.useAppConfig.getState().modelConfig,\n            ..._app_store__WEBPACK_IMPORTED_MODULE_1__.useChatStore.getState().currentSession().mask.modelConfig,\n            ...{\n                model: options.config.model\n            }\n        };\n        const requestPayload = {\n            messages,\n            stream: options.config.stream,\n            model: modelConfig.model,\n            temperature: modelConfig.temperature,\n            presence_penalty: modelConfig.presence_penalty,\n            frequency_penalty: modelConfig.frequency_penalty,\n            top_p: modelConfig.top_p\n        };\n        console.log(\"[Request] openai payload: \", requestPayload);\n        const shouldStream = !!options.config.stream;\n        const controller = new AbortController();\n        (_options_onController = (_options = options).onController) === null || _options_onController === void 0 ? void 0 : _options_onController.call(_options, controller);\n        try {\n            const chatPath = this.path(_app_constant__WEBPACK_IMPORTED_MODULE_0__.OpenaiPath.ChatPath);\n            const chatPayload = {\n                method: \"POST\",\n                body: JSON.stringify(requestPayload),\n                signal: controller.signal,\n                headers: (0,_api__WEBPACK_IMPORTED_MODULE_2__.getHeaders)()\n            };\n            // make a fetch request\n            const requestTimeoutId = setTimeout(()=>controller.abort(), _app_constant__WEBPACK_IMPORTED_MODULE_0__.REQUEST_TIMEOUT_MS);\n            if (shouldStream) {\n                let responseText = \"\";\n                let remainText = \"\";\n                let finished = false;\n                // animate response to make it looks smooth\n                function animateResponseText() {\n                    if (finished || controller.signal.aborted) {\n                        responseText += remainText;\n                        console.log(\"[Response Animation] finished\");\n                        return;\n                    }\n                    if (remainText.length > 0) {\n                        var _options_onUpdate, _options;\n                        const fetchCount = Math.max(1, Math.round(remainText.length / 60));\n                        const fetchText = remainText.slice(0, fetchCount);\n                        responseText += fetchText;\n                        remainText = remainText.slice(fetchCount);\n                        (_options_onUpdate = (_options = options).onUpdate) === null || _options_onUpdate === void 0 ? void 0 : _options_onUpdate.call(_options, responseText, fetchText);\n                    }\n                    requestAnimationFrame(animateResponseText);\n                }\n                // start animaion\n                animateResponseText();\n                const finish = ()=>{\n                    if (!finished) {\n                        finished = true;\n                        options.onFinish(responseText + remainText);\n                    }\n                };\n                controller.signal.onabort = finish;\n                (0,_fortaine_fetch_event_source__WEBPACK_IMPORTED_MODULE_7__.fetchEventSource)(chatPath, {\n                    ...chatPayload,\n                    async onopen (res) {\n                        var _contentType, _res_headers_get;\n                        clearTimeout(requestTimeoutId);\n                        const contentType = res.headers.get(\"content-type\");\n                        console.log(\"[OpenAI] request response content type: \", contentType);\n                        if ((_contentType = contentType) === null || _contentType === void 0 ? void 0 : _contentType.startsWith(\"text/plain\")) {\n                            responseText = await res.clone().text();\n                            return finish();\n                        }\n                        if (!res.ok || !((_res_headers_get = res.headers.get(\"content-type\")) === null || _res_headers_get === void 0 ? void 0 : _res_headers_get.startsWith(_fortaine_fetch_event_source__WEBPACK_IMPORTED_MODULE_7__.EventStreamContentType)) || res.status !== 200) {\n                            const responseTexts = [\n                                responseText\n                            ];\n                            let extraInfo = await res.clone().text();\n                            try {\n                                const resJson = await res.clone().json();\n                                extraInfo = (0,_app_utils_format__WEBPACK_IMPORTED_MODULE_4__.prettyObject)(resJson);\n                            } catch (e) {}\n                            if (res.status === 401) {\n                                responseTexts.push(_locales__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Error.Unauthorized);\n                            }\n                            if (extraInfo) {\n                                responseTexts.push(extraInfo);\n                            }\n                            responseText = responseTexts.join(\"\\n\\n\");\n                            return finish();\n                        }\n                    },\n                    onmessage (msg) {\n                        if (msg.data === \"[DONE]\" || finished) {\n                            return finish();\n                        }\n                        const text = msg.data;\n                        try {\n                            var _json_choices__delta, _json_choices_;\n                            const json = JSON.parse(text);\n                            const delta = (_json_choices_ = json.choices[0]) === null || _json_choices_ === void 0 ? void 0 : (_json_choices__delta = _json_choices_.delta) === null || _json_choices__delta === void 0 ? void 0 : _json_choices__delta.content;\n                            if (delta) {\n                                remainText += delta;\n                            }\n                        } catch (e) {\n                            console.error(\"[Request] parse error\", text);\n                        }\n                    },\n                    onclose () {\n                        finish();\n                    },\n                    onerror (e) {\n                        var _options_onError, _options;\n                        (_options_onError = (_options = options).onError) === null || _options_onError === void 0 ? void 0 : _options_onError.call(_options, e);\n                        throw e;\n                    },\n                    openWhenHidden: true\n                });\n            } else {\n                const res = await fetch(chatPath, chatPayload);\n                clearTimeout(requestTimeoutId);\n                const resJson = await res.json();\n                const message = this.extractMessage(resJson);\n                options.onFinish(message);\n            }\n        } catch (e) {\n            var _options_onError, _options1;\n            console.log(\"[Request] failed to make a chat request\", e);\n            (_options_onError = (_options1 = options).onError) === null || _options_onError === void 0 ? void 0 : _options_onError.call(_options1, e);\n        }\n    }\n    async usage() {\n        const formatDate = (d)=>\"\".concat(d.getFullYear(), \"-\").concat((d.getMonth() + 1).toString().padStart(2, \"0\"), \"-\").concat(d.getDate().toString().padStart(2, \"0\"));\n        const ONE_DAY = 1 * 24 * 60 * 60 * 1000;\n        const now = new Date();\n        const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n        const startDate = formatDate(startOfMonth);\n        const endDate = formatDate(new Date(Date.now() + ONE_DAY));\n        const [used, subs] = await Promise.all([\n            fetch(this.path(\"\".concat(_app_constant__WEBPACK_IMPORTED_MODULE_0__.OpenaiPath.UsagePath, \"?start_date=\").concat(startDate, \"&end_date=\").concat(endDate)), {\n                method: \"GET\",\n                headers: (0,_api__WEBPACK_IMPORTED_MODULE_2__.getHeaders)()\n            }),\n            fetch(this.path(_app_constant__WEBPACK_IMPORTED_MODULE_0__.OpenaiPath.SubsPath), {\n                method: \"GET\",\n                headers: (0,_api__WEBPACK_IMPORTED_MODULE_2__.getHeaders)()\n            })\n        ]);\n        if (used.status === 401) {\n            throw new Error(_locales__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Error.Unauthorized);\n        }\n        if (!used.ok || !subs.ok) {\n            throw new Error(\"Failed to query usage from openai\");\n        }\n        const response = await used.json();\n        const total = await subs.json();\n        if (response.error && response.error.type) {\n            throw Error(response.error.message);\n        }\n        if (response.total_usage) {\n            response.total_usage = Math.round(response.total_usage) / 100;\n        }\n        if (total.hard_limit_usd) {\n            total.hard_limit_usd = Math.round(total.hard_limit_usd * 100) / 100;\n        }\n        return {\n            used: response.total_usage,\n            total: total.hard_limit_usd\n        };\n    }\n    async models() {\n        var _resJson_data;\n        if (this.disableListModels) {\n            return _app_constant__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_MODELS.slice();\n        }\n        const res = await fetch(this.path(_app_constant__WEBPACK_IMPORTED_MODULE_0__.OpenaiPath.ListModelPath), {\n            method: \"GET\",\n            headers: {\n                ...(0,_api__WEBPACK_IMPORTED_MODULE_2__.getHeaders)()\n            }\n        });\n        const resJson = await res.json();\n        const chatModels = (_resJson_data = resJson.data) === null || _resJson_data === void 0 ? void 0 : _resJson_data.filter((m)=>m.id.startsWith(\"gpt-\"));\n        console.log(\"[Models]\", chatModels);\n        if (!chatModels) {\n            return [];\n        }\n        return chatModels.map((m)=>({\n                name: m.id,\n                available: true\n            }));\n    }\n    constructor(){\n        this.disableListModels = true;\n    }\n}\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-client)/./app/client/platforms/openai.ts\n"));

/***/ })

});
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-client)/./app/store/chat.ts":
/*!***************************!*\
  !*** ./app/store/chat.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BOT_HELLO: function() { return /* binding */ BOT_HELLO; },\n/* harmony export */   DEFAULT_TOPIC: function() { return /* binding */ DEFAULT_TOPIC; },\n/* harmony export */   createMessage: function() { return /* binding */ createMessage; },\n/* harmony export */   useChatStore: function() { return /* binding */ useChatStore; }\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ \"(app-client)/./app/utils.ts\");\n/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../locales */ \"(app-client)/./app/locales/index.ts\");\n/* harmony import */ var _components_ui_lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/ui-lib */ \"(app-client)/./app/components/ui-lib.tsx\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config */ \"(app-client)/./app/store/config.ts\");\n/* harmony import */ var _mask__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mask */ \"(app-client)/./app/store/mask.ts\");\n/* harmony import */ var _constant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../constant */ \"(app-client)/./app/constant.ts\");\n/* harmony import */ var _client_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../client/api */ \"(app-client)/./app/client/api.ts\");\n/* harmony import */ var _client_controller__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../client/controller */ \"(app-client)/./app/client/controller.ts\");\n/* harmony import */ var _utils_format__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/format */ \"(app-client)/./app/utils/format.ts\");\n/* harmony import */ var _utils_token__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/token */ \"(app-client)/./app/utils/token.ts\");\n/* harmony import */ var nanoid__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! nanoid */ \"(app-client)/./node_modules/nanoid/index.browser.js\");\n/* harmony import */ var _utils_store__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/store */ \"(app-client)/./app/utils/store.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\nfunction createMessage(override) {\n    return {\n        id: (0,nanoid__WEBPACK_IMPORTED_MODULE_11__.nanoid)(),\n        date: new Date().toLocaleString(),\n        role: \"user\",\n        content: \"\",\n        ...override\n    };\n}\nconst DEFAULT_TOPIC = _locales__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Store.DefaultTopic;\nconst BOT_HELLO = createMessage({\n    role: \"assistant\",\n    content: _locales__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Store.BotHello\n});\nfunction createEmptySession() {\n    return {\n        id: (0,nanoid__WEBPACK_IMPORTED_MODULE_11__.nanoid)(),\n        topic: DEFAULT_TOPIC,\n        memoryPrompt: \"\",\n        messages: [],\n        stat: {\n            tokenCount: 0,\n            wordCount: 0,\n            charCount: 0\n        },\n        lastUpdate: Date.now(),\n        lastSummarizeIndex: 0,\n        mask: (0,_mask__WEBPACK_IMPORTED_MODULE_4__.createEmptyMask)()\n    };\n}\nfunction getSummarizeModel(currentModel) {\n    // if it is using gpt-* models, force to use 3.5 to summarize\n    return currentModel.startsWith(\"gpt\") ? _constant__WEBPACK_IMPORTED_MODULE_5__.SUMMARIZE_MODEL : currentModel;\n}\nfunction countMessages(msgs) {\n    return msgs.reduce((pre, cur)=>pre + (0,_utils_token__WEBPACK_IMPORTED_MODULE_9__.estimateTokenLength)(cur.content), 0);\n}\nfunction fillTemplateWith(input, modelConfig) {\n    var _KnowledgeCutOffDate_modelConfig_model;\n    let cutoff = (_KnowledgeCutOffDate_modelConfig_model = _constant__WEBPACK_IMPORTED_MODULE_5__.KnowledgeCutOffDate[modelConfig.model]) !== null && _KnowledgeCutOffDate_modelConfig_model !== void 0 ? _KnowledgeCutOffDate_modelConfig_model : _constant__WEBPACK_IMPORTED_MODULE_5__.KnowledgeCutOffDate.default;\n    const vars = {\n        cutoff,\n        model: modelConfig.model,\n        time: new Date().toLocaleString(),\n        lang: (0,_locales__WEBPACK_IMPORTED_MODULE_1__.getLang)(),\n        input: input\n    };\n    var _modelConfig_template;\n    let output = (_modelConfig_template = modelConfig.template) !== null && _modelConfig_template !== void 0 ? _modelConfig_template : _constant__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_INPUT_TEMPLATE;\n    // must contains {{input}}\n    const inputVar = \"{{input}}\";\n    if (!output.includes(inputVar)) {\n        output += \"\\n\" + inputVar;\n    }\n    Object.entries(vars).forEach((param)=>{\n        let [name, value] = param;\n        output = output.replaceAll(\"{{\".concat(name, \"}}\"), value);\n    });\n    return output;\n}\nconst DEFAULT_CHAT_STATE = {\n    sessions: [\n        createEmptySession()\n    ],\n    currentSessionIndex: 0\n};\nconst useChatStore = (0,_utils_store__WEBPACK_IMPORTED_MODULE_10__.createPersistStore)(DEFAULT_CHAT_STATE, (set, _get)=>{\n    function get() {\n        return {\n            ..._get(),\n            ...methods\n        };\n    }\n    const methods = {\n        clearSessions () {\n            set(()=>({\n                    sessions: [\n                        createEmptySession()\n                    ],\n                    currentSessionIndex: 0\n                }));\n        },\n        selectSession (index) {\n            set({\n                currentSessionIndex: index\n            });\n        },\n        moveSession (from, to) {\n            set((state)=>{\n                const { sessions, currentSessionIndex: oldIndex } = state;\n                // move the session\n                const newSessions = [\n                    ...sessions\n                ];\n                const session = newSessions[from];\n                newSessions.splice(from, 1);\n                newSessions.splice(to, 0, session);\n                // modify current session id\n                let newIndex = oldIndex === from ? to : oldIndex;\n                if (oldIndex > from && oldIndex <= to) {\n                    newIndex -= 1;\n                } else if (oldIndex < from && oldIndex >= to) {\n                    newIndex += 1;\n                }\n                return {\n                    currentSessionIndex: newIndex,\n                    sessions: newSessions\n                };\n            });\n        },\n        newSession (mask) {\n            const session = createEmptySession();\n            if (mask) {\n                const config = _config__WEBPACK_IMPORTED_MODULE_3__.useAppConfig.getState();\n                const globalModelConfig = config.modelConfig;\n                session.mask = {\n                    ...mask,\n                    modelConfig: {\n                        ...globalModelConfig,\n                        ...mask.modelConfig\n                    }\n                };\n                session.topic = mask.name;\n            }\n            set((state)=>({\n                    currentSessionIndex: 0,\n                    sessions: [\n                        session\n                    ].concat(state.sessions)\n                }));\n        },\n        nextSession (delta) {\n            const n = get().sessions.length;\n            const limit = (x)=>(x + n) % n;\n            const i = get().currentSessionIndex;\n            get().selectSession(limit(i + delta));\n        },\n        deleteSession (index) {\n            const deletingLastSession = get().sessions.length === 1;\n            const deletedSession = get().sessions.at(index);\n            if (!deletedSession) return;\n            const sessions = get().sessions.slice();\n            sessions.splice(index, 1);\n            const currentIndex = get().currentSessionIndex;\n            let nextIndex = Math.min(currentIndex - Number(index < currentIndex), sessions.length - 1);\n            if (deletingLastSession) {\n                nextIndex = 0;\n                sessions.push(createEmptySession());\n            }\n            // for undo delete action\n            const restoreState = {\n                currentSessionIndex: get().currentSessionIndex,\n                sessions: get().sessions.slice()\n            };\n            set(()=>({\n                    currentSessionIndex: nextIndex,\n                    sessions\n                }));\n            (0,_components_ui_lib__WEBPACK_IMPORTED_MODULE_2__.showToast)(_locales__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Home.DeleteToast, {\n                text: _locales__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Home.Revert,\n                onClick () {\n                    set(()=>restoreState);\n                }\n            }, 5000);\n        },\n        currentSession () {\n            let index = get().currentSessionIndex;\n            const sessions = get().sessions;\n            if (index < 0 || index >= sessions.length) {\n                index = Math.min(sessions.length - 1, Math.max(0, index));\n                set(()=>({\n                        currentSessionIndex: index\n                    }));\n            }\n            const session = sessions[index];\n            return session;\n        },\n        onNewMessage (message) {\n            get().updateCurrentSession((session)=>{\n                session.messages = session.messages.concat();\n                session.lastUpdate = Date.now();\n            });\n            get().updateStat(message);\n            get().summarizeSession();\n        },\n        async onUserInput (content) {\n            const session = get().currentSession();\n            const modelConfig = session.mask.modelConfig;\n            const userContent = fillTemplateWith(content, modelConfig);\n            console.log(\"[User Input] after template: \", userContent);\n            const userMessage = createMessage({\n                role: \"user\",\n                content: userContent\n            });\n            const botMessage = createMessage({\n                role: \"assistant\",\n                streaming: true,\n                model: modelConfig.model\n            });\n            // get recent messages\n            const recentMessages = get().getMessagesWithMemory();\n            const sendMessages = recentMessages.concat(userMessage);\n            const messageIndex = get().currentSession().messages.length + 1;\n            // save user's and bot's message\n            get().updateCurrentSession((session)=>{\n                const savedUserMessage = {\n                    ...userMessage,\n                    content\n                };\n                session.messages = session.messages.concat([\n                    savedUserMessage,\n                    botMessage\n                ]);\n            });\n            // make request\n            _client_api__WEBPACK_IMPORTED_MODULE_6__.api.llm.chat({\n                messages: sendMessages,\n                config: {\n                    ...modelConfig,\n                    stream: true\n                },\n                onUpdate (message) {\n                    botMessage.streaming = true;\n                    if (message) {\n                        botMessage.content = message;\n                    }\n                    get().updateCurrentSession((session)=>{\n                        session.messages = session.messages.concat();\n                    });\n                },\n                onFinish (message) {\n                    botMessage.streaming = false;\n                    if (message) {\n                        botMessage.content = message;\n                        get().onNewMessage(botMessage);\n                    }\n                    _client_controller__WEBPACK_IMPORTED_MODULE_7__.ChatControllerPool.remove(session.id, botMessage.id);\n                },\n                onError (error) {\n                    const isAborted = error.message.includes(\"aborted\");\n                    botMessage.content += \"\\n\\n\" + (0,_utils_format__WEBPACK_IMPORTED_MODULE_8__.prettyObject)({\n                        error: true,\n                        message: error.message\n                    });\n                    botMessage.streaming = false;\n                    userMessage.isError = !isAborted;\n                    botMessage.isError = !isAborted;\n                    get().updateCurrentSession((session)=>{\n                        session.messages = session.messages.concat();\n                    });\n                    var _botMessage_id;\n                    _client_controller__WEBPACK_IMPORTED_MODULE_7__.ChatControllerPool.remove(session.id, (_botMessage_id = botMessage.id) !== null && _botMessage_id !== void 0 ? _botMessage_id : messageIndex);\n                    console.error(\"[Chat] failed \", error);\n                },\n                onController (controller) {\n                    var _botMessage_id;\n                    // collect controller for stop/retry\n                    _client_controller__WEBPACK_IMPORTED_MODULE_7__.ChatControllerPool.addController(session.id, (_botMessage_id = botMessage.id) !== null && _botMessage_id !== void 0 ? _botMessage_id : messageIndex, controller);\n                }\n            });\n        },\n        getMemoryPrompt () {\n            const session = get().currentSession();\n            return {\n                role: \"system\",\n                content: session.memoryPrompt.length > 0 ? _locales__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Store.Prompt.History(session.memoryPrompt) : \"\",\n                date: \"\"\n            };\n        },\n        getMessagesWithMemory () {\n            const session = get().currentSession();\n            const modelConfig = session.mask.modelConfig;\n            var _session_clearContextIndex;\n            const clearContextIndex = (_session_clearContextIndex = session.clearContextIndex) !== null && _session_clearContextIndex !== void 0 ? _session_clearContextIndex : 0;\n            const messages = session.messages.slice();\n            const totalMessageCount = session.messages.length;\n            // in-context prompts\n            const contextPrompts = session.mask.context.slice();\n            // system prompts, to get close to OpenAI Web ChatGPT\n            const shouldInjectSystemPrompts = modelConfig.enableInjectSystemPrompts;\n            const systemPrompts = shouldInjectSystemPrompts ? [\n                createMessage({\n                    role: \"system\",\n                    content: fillTemplateWith(\"\", {\n                        ...modelConfig,\n                        template: _constant__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_SYSTEM_TEMPLATE\n                    })\n                })\n            ] : [];\n            if (shouldInjectSystemPrompts) {\n                var _systemPrompts_at;\n                var _systemPrompts_at_content;\n                console.log(\"[Global System Prompt] \", (_systemPrompts_at_content = (_systemPrompts_at = systemPrompts.at(0)) === null || _systemPrompts_at === void 0 ? void 0 : _systemPrompts_at.content) !== null && _systemPrompts_at_content !== void 0 ? _systemPrompts_at_content : \"empty\");\n            }\n            // long term memory\n            const shouldSendLongTermMemory = modelConfig.sendMemory && session.memoryPrompt && session.memoryPrompt.length > 0 && session.lastSummarizeIndex > clearContextIndex;\n            const longTermMemoryPrompts = shouldSendLongTermMemory ? [\n                get().getMemoryPrompt()\n            ] : [];\n            const longTermMemoryStartIndex = session.lastSummarizeIndex;\n            // short term memory\n            const shortTermMemoryStartIndex = Math.max(0, totalMessageCount - modelConfig.historyMessageCount);\n            // lets concat send messages, including 4 parts:\n            // 0. system prompt: to get close to OpenAI Web ChatGPT\n            // 1. long term memory: summarized memory messages\n            // 2. pre-defined in-context prompts\n            // 3. short term memory: latest n messages\n            // 4. newest input message\n            const memoryStartIndex = shouldSendLongTermMemory ? Math.min(longTermMemoryStartIndex, shortTermMemoryStartIndex) : shortTermMemoryStartIndex;\n            // and if user has cleared history messages, we should exclude the memory too.\n            const contextStartIndex = Math.max(clearContextIndex, memoryStartIndex);\n            const maxTokenThreshold = modelConfig.max_tokens;\n            // get recent messages as much as possible\n            const reversedRecentMessages = [];\n            for(let i = totalMessageCount - 1, tokenCount = 0; i >= contextStartIndex && tokenCount < maxTokenThreshold; i -= 1){\n                const msg = messages[i];\n                if (!msg || msg.isError) continue;\n                tokenCount += (0,_utils_token__WEBPACK_IMPORTED_MODULE_9__.estimateTokenLength)(msg.content);\n                reversedRecentMessages.push(msg);\n            }\n            // concat all messages\n            const recentMessages = [\n                ...systemPrompts,\n                ...longTermMemoryPrompts,\n                ...contextPrompts,\n                ...reversedRecentMessages.reverse()\n            ];\n            return recentMessages;\n        },\n        updateMessage (sessionIndex, messageIndex, updater) {\n            var _session, _messages;\n            const sessions = get().sessions;\n            const session = sessions.at(sessionIndex);\n            const messages = (_session = session) === null || _session === void 0 ? void 0 : _session.messages;\n            updater((_messages = messages) === null || _messages === void 0 ? void 0 : _messages.at(messageIndex));\n            set(()=>({\n                    sessions\n                }));\n        },\n        resetSession () {\n            get().updateCurrentSession((session)=>{\n                session.messages = [];\n                session.memoryPrompt = \"\";\n            });\n        },\n        summarizeSession () {\n            var _modelConfig;\n            const config = _config__WEBPACK_IMPORTED_MODULE_3__.useAppConfig.getState();\n            const session = get().currentSession();\n            // remove error messages if any\n            const messages = session.messages;\n            // should summarize topic after chating more than 50 words\n            const SUMMARIZE_MIN_LEN = 50;\n            if (config.enableAutoGenerateTitle && session.topic === DEFAULT_TOPIC && countMessages(messages) >= SUMMARIZE_MIN_LEN) {\n                const topicMessages = messages.concat(createMessage({\n                    role: \"user\",\n                    content: _locales__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Store.Prompt.Topic\n                }));\n                _client_api__WEBPACK_IMPORTED_MODULE_6__.api.llm.chat({\n                    messages: topicMessages,\n                    config: {\n                        model: getSummarizeModel(session.mask.modelConfig.model)\n                    },\n                    onFinish (message) {\n                        get().updateCurrentSession((session)=>session.topic = message.length > 0 ? (0,_utils__WEBPACK_IMPORTED_MODULE_0__.trimTopic)(message) : DEFAULT_TOPIC);\n                    }\n                });\n            }\n            const modelConfig = session.mask.modelConfig;\n            var _session_clearContextIndex;\n            const summarizeIndex = Math.max(session.lastSummarizeIndex, (_session_clearContextIndex = session.clearContextIndex) !== null && _session_clearContextIndex !== void 0 ? _session_clearContextIndex : 0);\n            let toBeSummarizedMsgs = messages.filter((msg)=>!msg.isError).slice(summarizeIndex);\n            const historyMsgLength = countMessages(toBeSummarizedMsgs);\n            var _ref;\n            if ((_ref = historyMsgLength > ((_modelConfig = modelConfig) === null || _modelConfig === void 0 ? void 0 : _modelConfig.max_tokens)) !== null && _ref !== void 0 ? _ref : 4000) {\n                const n = toBeSummarizedMsgs.length;\n                toBeSummarizedMsgs = toBeSummarizedMsgs.slice(Math.max(0, n - modelConfig.historyMessageCount));\n            }\n            // add memory prompt\n            toBeSummarizedMsgs.unshift(get().getMemoryPrompt());\n            const lastSummarizeIndex = session.messages.length;\n            console.log(\"[Chat History] \", toBeSummarizedMsgs, historyMsgLength, modelConfig.compressMessageLengthThreshold);\n            if (historyMsgLength > modelConfig.compressMessageLengthThreshold && modelConfig.sendMemory) {\n                _client_api__WEBPACK_IMPORTED_MODULE_6__.api.llm.chat({\n                    messages: toBeSummarizedMsgs.concat(createMessage({\n                        role: \"system\",\n                        content: _locales__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Store.Prompt.Summarize,\n                        date: \"\"\n                    })),\n                    config: {\n                        ...modelConfig,\n                        stream: true,\n                        model: getSummarizeModel(session.mask.modelConfig.model)\n                    },\n                    onUpdate (message) {\n                        session.memoryPrompt = message;\n                    },\n                    onFinish (message) {\n                        console.log(\"[Memory] \", message);\n                        get().updateCurrentSession((session)=>{\n                            session.lastSummarizeIndex = lastSummarizeIndex;\n                            session.memoryPrompt = message; // Update the memory prompt for stored it in local storage\n                        });\n                    },\n                    onError (err) {\n                        console.error(\"[Summarize] \", err);\n                    }\n                });\n            }\n        },\n        updateStat (message) {\n            get().updateCurrentSession((session)=>{\n                session.stat.charCount += message.content.length;\n            // TODO: should update chat count and word count\n            });\n        },\n        updateCurrentSession (updater) {\n            const sessions = get().sessions;\n            const index = get().currentSessionIndex;\n            updater(sessions[index]);\n            set(()=>({\n                    sessions\n                }));\n        },\n        clearAllData () {\n            localStorage.clear();\n            location.reload();\n        }\n    };\n    return methods;\n}, {\n    name: _constant__WEBPACK_IMPORTED_MODULE_5__.StoreKey.Chat,\n    version: 3.1,\n    migrate (persistedState, version) {\n        const state = persistedState;\n        const newState = JSON.parse(JSON.stringify(state));\n        if (version < 2) {\n            newState.sessions = [];\n            const oldSessions = state.sessions;\n            for (const oldSession of oldSessions){\n                const newSession = createEmptySession();\n                newSession.topic = oldSession.topic;\n                newSession.messages = [\n                    ...oldSession.messages\n                ];\n                newSession.mask.modelConfig.sendMemory = true;\n                newSession.mask.modelConfig.historyMessageCount = 4;\n                newSession.mask.modelConfig.compressMessageLengthThreshold = 1000;\n                newState.sessions.push(newSession);\n            }\n        }\n        if (version < 3) {\n            // migrate id to nanoid\n            newState.sessions.forEach((s)=>{\n                s.id = (0,nanoid__WEBPACK_IMPORTED_MODULE_11__.nanoid)();\n                s.messages.forEach((m)=>m.id = (0,nanoid__WEBPACK_IMPORTED_MODULE_11__.nanoid)());\n            });\n        }\n        // Enable `enableInjectSystemPrompts` attribute for old sessions.\n        // Resolve issue of old sessions not automatically enabling.\n        if (version < 3.1) {\n            newState.sessions.forEach((s)=>{\n                if (// Exclude those already set by user\n                !s.mask.modelConfig.hasOwnProperty(\"enableInjectSystemPrompts\")) {\n                    // Because users may have changed this configuration,\n                    // the user's current configuration is used instead of the default\n                    const config = _config__WEBPACK_IMPORTED_MODULE_3__.useAppConfig.getState();\n                    s.mask.modelConfig.enableInjectSystemPrompts = config.modelConfig.enableInjectSystemPrompts;\n                }\n            });\n        }\n        return newState;\n    }\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-client)/./app/store/chat.ts\n"));

/***/ })

});